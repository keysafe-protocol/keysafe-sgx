enclave {
    from "sgx_tkey_exchange.edl" import *;
    from "sgx_tsgxssl.edl" import *;
    from "sgx_pthread.edl" import *;
    from "sgx_tstdc.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"

    trusted {
        /* define ECALLs here. */

        public sgx_status_t enclave_init_ra(int b_pse, [out]sgx_ra_context_t *p_context);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);

        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        public sgx_status_t put_secret_data(sgx_ra_context_t context,  
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* gcm_mac);

        public sgx_status_t ec_gen_key();

        public sgx_status_t ec_deliver_public_key();

        public sgx_status_t ec_aes_gcm_encrypt([in,string]char* str);
        public sgx_status_t ec_aes_gcm_decrypt([in,string]char* shared, [in, string]char* ciphertext);

        //fix encrypted_secret to unencrypted
        public sgx_status_t ec_gen_gauth_secret([out, size=len]uint8_t* sealedSecret, int len, [out, size=256]uint8_t* encrypted_secret);

        public uint32_t ec_calc_sealed_size(uint32_t len);

        //to remove sharedStr parameter
        public sgx_status_t ec_ks_exchange([in, string]char* userpkeyHex, [out,size=256]char* enclaveHex, [out, size=256]char* sharedStr);

        public sgx_status_t ec_ks_seal([in, string]const char* account,
                [in, size=len]const char *str, int len, 
                [out, size=sealedSize]uint8_t* sealedStr, int sealedSize);

        public uint32_t ec_ks_unseal_gauth([in,string] const char* account, 
                [in,size=cipher_code_len]uint8_t* code_cipher, uint32_t cipher_code_len, 
                uint64_t tm,
                [in, size=condition_size] uint8_t* condition, uint32_t condition_size, 
                [in, size=sealed_data_size]uint8_t* sealed_data, uint32_t sealed_data_size, 
                [out,size=8192]uint8_t* encrypted_unseal_data);

        public uint32_t ec_ks_unseal([in, string]const char* pkey, [in, size=data_size] uint8_t* str, uint32_t data_size);

        public uint32_t ec_auth([in, string]const char* account, [in, string] const char* userpkeyHex);

        public sgx_status_t ec_auth_confirm([in, string] const char* account, [in, size=cipher_len] uint8_t* code_cipher, uint32_t cipher_len);

        public uint32_t ec_gen_register_mail_code([in, string]const char* account, [in, size=content_len] uint8_t* content, uint32_t content_len);

        public uint32_t ec_register_mail([in, string]const char* account, 
                [in, size=cipher_code_len]uint8_t* code_cipher, uint32_t cipher_code_len, 
                [out, size=sealedSize]uint8_t* sealedStr, int sealedSize);

        public sgx_status_t ec_register_password([in, string]const char* account, 
                [in, size=cipher_code_len]uint8_t* code_cipher, uint32_t cipher_code_len, 
                [out, size=sealedSize]uint8_t* sealedStr, int sealedSize);

        public uint32_t ec_register_gauth([in, string]const char* account, 
                [out, size=256]uint8_t* secret_cipher, 
                [out, size=1024]uint8_t* sealedStr);

        public sgx_status_t ec_verify_gauth_code(int gauth_code, [in, string]char* secret, uint64_t tm);

    };

    untrusted {
        /* define OCALLs here. */
        void oc_print([in, string] const char *str);
        /*
           void oc_deliver_public_key([in, string] const char *str);
           void oc_encrypted_string([in,string]const char *str);

           void oc_deliver_sealed_string([in,string]const char* str);
           void oc_deliver_unseal_string([in, string]const char* str);
         */
    };
};

