enclave {
    from "sgx_tsgxssl.edl" import *;
    from "sgx_pthread.edl" import *;
    from "sgx_tstdc.edl" import *;

    trusted {
        /* define ECALLs here. */
        public sgx_status_t ec_gen_key();

        public sgx_status_t ec_deliver_public_key();
        public sgx_status_t ec_rsa_encrypt([in,string]const char* str);
        public sgx_status_t ec_rsa_decrypt([in,string]const char* str);

        public sgx_status_t ec_aes_encrypt([in,string]char* str);
        public sgx_status_t ec_aes_decrypt([in,string]char* str);

        public sgx_status_t ec_ks_exchange_pair_key([in, string]const char* str);

        public sgx_status_t ec_ks_exchange([in, string] char* userpkeyHex, [out,size=256]char* str);
        public sgx_status_t ec_ks_seal([in, string]const char *str,[out,size=1024]char* sealedStr);

        public sgx_status_t ec_ks_unseal([in, string]char* pkey, [in, string] const char *str, [in]uint8_t array[6]);
        public sgx_status_t ec_prove_me([in]uint8_t array[6], [out, size=1024] char* unsealStr);

       };

    untrusted {
        /* define OCALLs here. */
        void oc_print([in, string] const char *str);
        /*
        void oc_deliver_public_key([in, string] const char *str);
        void oc_encrypted_string([in,string]const char *str);

        void oc_deliver_sealed_string([in,string]const char* str);
        void oc_deliver_unseal_string([in, string]const char* str);
        */
    };
};

